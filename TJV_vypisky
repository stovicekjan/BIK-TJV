JSR = specifikace
JCP = Java Community Process - sdruzeni stojici za specifikacemi



Classes
public - pouzitelne z kazde metody z celeho programu
v souboru muze byt jen jedna public class

protected - pouzitelne ze stejne tridy nebo z rodicu (rekurzivne)

nic - package private - pouzitelne ze stejneho balicku

private - pouzitelne jen ze stejne tridy

-------------

metoda getClass - da se dostat k informacim o tride (debugging)


-------------

kdyz volam konstruktor bez super, vola se automaticky bezparametricky konstruktor predka

import jen zavadi alias (narozdil od C++ - tam preprocesor nalinkuje knihovnu)
import nefunguje rekurzivne (nefunguje na podbalicky)

----

interface = abstraktni trida s dalsimi vlastnostmi
- vsechny metody jsou public abstract, tudiz to tam nemusime psat
- muzeme dedit jen z jedne tridy, ale z vice interfacu

funkcionalni interface - ma presne jednu abstraktni metodu
- pak lze pouzit lambda vyraz

----
DB
v netbeans: Serivces - Databases - Drivers - Oracle Thin - (RMB) customize
tam pridat ojdbc.jar ze stranek oracle 
prihlaseni k oracle.fit.cvut.cz pomoci pocatecniho sys hesla (profile.fit.cvut.cz)

---
snapshot
- kdyz to bude oznacene jako snapshot, bude maven vzdy stahovat novejsi verzi
- kdyz ne, nebude kontrolovat, zda existuje novejsi verze
- tato verze nesouvisi s verzi v gitu

---
pom - project object model

https://search.maven.org/

---

prace s datem
LocalDateTime
v EE spis java.util.Date (LocalDateTime casto neni jeste implementovana)

--- 
rozhrani Throwable
ma dva potomky - Error (systemove chyby), Exception (vyjimky)
Exception ma spoustu potomku, mj. RuntimeException

kdyz implementuju metodu, co vyhazuje vyjimku, jsou dve moznosti:
1. try-catch (chci osetrit vyjimku)
2. throws FileNotFoundException /napr./ (nechci osetrit vyjimku)

---
OptionalDouble
- wrapper kolem hodnoty, ktera muze a nemusi byt definovana



---

Semestralka
- DB s 3 entitami, aspon jeden vztah M:N (tedy celkem 4 tabulky)
----

aplikacni servery
kouknout na 
- EIS 
- JNDI - jmenna sluzba (abychom na urovni apl. serveru neresili, kam presne se pripojovat, ale odkazovali se jen na nazev pripojeni)
			- hezky popsane v prezentaci vcetne kodu
			
----

Glassfish
- connection pool
		- databazove pripojeni je drahe - neni idealni byt pripojeny furt (zere to resources serveru)
		- neni dobre se pripojovat pokazde znova - je to pomale
		connection pool - mame nekolik volnych spojeni, ktere neuzavreme, ale jen vratime, kdyz ukoncime praci s DB
- AdKo: spustit Glassfish server (NetBeans - Services - Servers)
	- NetBeans - Services - Servers - GF - domain admin console
- vytvorit JNDI:
	- GF AdKo: 
				- JDBC - JDBC resources - New - nazev jdbc/something, vybrat connection pool
		
ojdbc7.jar je potreba dat do glassfish5/glassfish/domains/domain1/lib
new connection pool
- na glassfish: resources - JDBC - JDBC connection pools - New
ResourceType: javax.sql.DataSource
Database Driver Vendor: Oracle


=================================================================================================
TJV 14.12.
=================================================================================================

ORM (object relation mapping)
relacni databaze casto neumi popsat vsechny vztahy mezi objekty
proto se pouziva ORM, abychom namapovali objekty na RDB

relacni vazby popsane v PPT vcetne kusu kodu

Entity manager
4 stavy
Novy objekt
Managed
Removed (je to objekt, ale je odpojeny od DB)
Detached (je v DB, ale neni objekt)

JPA, za tim je treba Hibernate nebo EclipseLink (soucast Glassfish)

find (ID) - vrati objekt
kriteria API = parametry, ktere umoznuji definovat dotazy nad daty

JPQL - SQL s objektovymi rysy (pracujeme s objektama, ne s entitami v DB)
CriteriaQuery - pridava odolnost vuci zmenam v DB


persistence unit = tridy + konfigurace


vytvorit persistence unit:
	- NB: new file - persiscence - persistence unit (+vybrat projekt)
	- persistence provider = knihovna, ktera bude delat ORM (je jedno ktery)
	- vybrat data source - jdbc/something, co jsme vytvorili
	- table generation strategy
			= co aplikace udela pri svem spusteni
			- create = vytvori objekty, ktere jeste nema



persistence.xml
	<exclude-unlisted-classes> - vyjmenujeme tridy, ktere nejsou entitni, nebo dame false
	
	
Coding:	
pro kazdou entitu vytvorime tridu s anotaci @Entity
entita musi mit primarni klic s anotaci @Id
entita by mela mit metody equals + hashCode (pocitame oboji z Id)
potrebujeme gettery a settery na vsechny atributy
konstruktor pro inicializaci (volitelny)
ale musiome mit i public konstuerktor bez parametru (povinny)

ManyToMany relace:
	- jedna z entit ma ridici vztah
	- jedna ma anotaci @ManyToMany, druha @ManyToMany(mappedBy = "favourites"). Tim se obe strany relace spoji dohromady

na jedne strane vztahu je potreba uvest 
@JoinTable(
        name = "TJV_5_SERIE_2_PERSON",
        joinColumns = @JoinColumn(name = "PID"),
        inverseJoinColumns = @JoinColumn(name = "SID")
    )

v NB: New - Entity Classes from DB (v persistence)
	- vytvori automaticky objekty podle databaze


------------------------------------------
Business Logic
- functional requirements - toto resi business logika
- non-functional requirements

EJB - technologie, ktera umi resit BL
EJB instancuje sam EJB kontejner
stateful session bean - udrzuje informaci o klientovi
singleton session bean - jedina instance obsluhuje vsechny requesty pro vsechny klienty
(blize popsane v ppt)


--------------------------------------------
Webove sluzby

SOAP - jedine URL na celou sluzbu. Posilam zpravu, ve ktere rikam, co chci
		 - hodne standardizovany, pouziva XML

REST - kazdy datovy zdroj ma svuj URL
 		 - malo standardizovany

vice o HTTP protokolu: w3.org, RFC

@POST - muze znamenat update, ale i neco mimo CRUD
spousta browseru umi jenom GET a POST

@Produces({"application/json", MediaType.APPLICATION_XML})
- pak server rovnou vzgeneruje objekt ve formatu json/xml, podle toho, co klient chce






=================================================================================================
TJV 5.1.
=================================================================================================



@GeneratedValue(strategy = GenerationType.SEQUENCE, generator = "TJV_5_SEQ")
@SequenceGenerator(name = "TJV_5_SEQ")

TJV_5_SEQ = jmeno sekvence ve skriptu

java.util.Date - umi datum, cas a timestamp - je treba urcit pomoci anotace @Temporal



vzor Abstract Facade - ??

@QueryParam("remove") - v url je za otaznikem (.../persons/id?remove=true)
(na rozdil treba od id, ktere je soucasti url)

Context path = kde aplikace bezi (localhost:8080/tvseries-backend)
endpoint = platne umisteni (/resources)

logy - v AdKo
server - view log files

stackoverflow error - nejspis cyklus v DB


Entity -> DTO -> JSON/XML

@XmlRootElement - podpora XML
pro JSON se delat nemusi diky knihovne JSONBinding

----
DTO mame v jinem projektu nez backend --> musime pridat zavislost


AbstractCRUDResource prepiseme na <K, E, D> - pridame DTO






upravit AbstractCRUDResource, aby pracovala s DTO misto entit
analogicky upravit i potomky
	- konstruktor musi volat konstruktora rodice

PersonResource - dela z entity DTO a naopak

Testovani REST sluzeb
wget, curl
SOAPUI, Postman
HTTP Resource Test, RESTer - plugin do prohlizece

PUT metoda - v RESTer nastavit content type

pozor na NPException: PUT person bez favourites:
d -> new PersonEntity(d.getId(), d.getName(), null ? null : d.getFavourites().stream()



--------
REST client
-------

knihovna jax.rs.client

do pom.xml pridat
<dependencies>
        <dependency>
            <groupId>javax</groupId>
            <artifactId>javaee-web-api</artifactId>
            <version>8.0</version>
            <scope>provided</scope> // tim padem se to pouzije jen pri kompilaci, ale nebude se to pridavat do jar a deployovat na server, protoze uz to tam je
        </dependency>
</dependencies>
    
    

frontend
Vaadin - v podstate preklad Javy na JS
	- GWT
	- 
	
============================================================================
TJV 12/1/19
============================================================================

myTheme = jmeno skinu pro webove rozhrani
myUI = jmeno tridy


servlet = trida, ktera umoznuje pro http request generovat odpoved


@WebServlet(urlPatterns = "/*", name = "MyUIServlet", asyncSupported = true)
- urcuje, kterou URL bude obsluhovat


kolekce v jave muze byt read only
jinak si ji musime sami napsat



Binder - propojuje nekolik formularovych policek
dovoluje provadet akce, konverze, validuje


seriesGrid.addSelectionListener(event -> {
	
});


